{
  "id": "1758931293553",
  "name": "twst",
  "description": "",
  "createdAt": "2025-09-27T00:01:33.553Z",
  "operations": [
    {
      "type": "create",
      "file": "src/pages/admin/ai-tools/quiz-wizard/QuizWizardDashboard.tsx",
      "content": "import { Link } from \"react-router-dom\";\nimport { SubPage } from \"@/components/layout\";\nimport { Lead } from \"@/components/reader\";\nimport { Card, CardHeader, CardTitle, CardContent, CardDescription } from \"@/components/ui/card\";\nimport { Button, Alert, AlertDescription } from \"@/components/ui\";\nimport { Brain, Sparkles, ChevronRight, HelpCircle, Info } from \"lucide-react\";\n\nexport function QuizWizardDashboard() {\n  return (\n    <SubPage>\n      <Lead\n        title=\"Kreator quiz√≥w ‚Äî panel\"\n        description=\"Wygeneruj pytania na podstawie istniejƒÖcych materia≈Ç√≥w edukacyjnych\"\n      />\n\n      <div className=\"relative overflow-hidden rounded-2xl border mb-6\">\n        <div className=\"absolute inset-0 bg-cyan-50\" />\n        <div className=\"relative px-6 py-8 flex items-center gap-3\">\n          <div className=\"shrink-0 inline-flex h-10 w-10 items-center justify-center rounded-xl bg-black text-white\">\n            <Brain className=\"w-5 h-5\" />\n          </div>\n          <div className=\"flex-1\">\n            <h1 className=\"text-xl sm:text-2xl font-semibold leading-tight\">Kreator quiz√≥w</h1>\n            <p className=\"text-sm text-zinc-600\">\n              Wybierz kurs, temat i materia≈Ç, a potem wygeneruj zestaw pyta≈Ñ wielokrotnego wyboru z poprawnymi odpowiedziami i wyja≈õnieniami.\n            </p>\n          </div>\n          <div className=\"hidden md:block\">\n            <Button asChild>\n              <Link to=\"/admin/quiz-wizard/step1\" className=\"inline-flex items-center gap-2\">\n                Nowa sesja\n                <ChevronRight className=\"w-4 h-4\" />\n              </Link>\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid gap-6 lg:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Sparkles className=\"w-5 h-5\" />\n              Szybki start\n            </CardTitle>\n            <CardDescription>3 kroki do gotowego quizu</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-3 text-sm\">\n            <ol className=\"list-decimal list-inside space-y-1 text-zinc-700\">\n              <li>Wybierz kurs ‚Üí temat ‚Üí materia≈Ç (Markdown).</li>\n              <li>Ustaw parametry (liczba pyta≈Ñ, poziom trudno≈õci, wyja≈õnienia).</li>\n              <li>Wygeneruj pytania i zapisz quiz do bazy (Supabase) jako aktywno≈õƒá typu <code>quiz</code>.</li>\n            </ol>\n            <Button asChild className=\"w-full\">\n              <Link to=\"/admin/quiz-wizard/step1\" className=\"inline-flex items-center gap-2\">\n                Przejd≈∫ do kroku 1\n                <ChevronRight className=\"w-4 h-4\" />\n              </Link>\n            </Button>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <HelpCircle className=\"w-5 h-5\" />\n              Jak generujemy pytania?\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3 text-sm text-muted-foreground\">\n            <p>Model analizuje tre≈õƒá materia≈Çu i tworzy pytania sprawdzajƒÖce zrozumienie kluczowych koncepcji.</p>\n            <p>Format generatu: JSON ‚Üí zapis w tre≈õci aktywno≈õci jako YAML (lista pyta≈Ñ).</p>\n            <Alert>\n              <Info className=\"h-4 w-4\" />\n              <AlertDescription className=\"text-xs\">\n                Quiz jest tworzony w tym samym temacie co materia≈Ç. Mo≈ºesz go p√≥≈∫niej przypisaƒá do grup uczni√≥w.\n              </AlertDescription>\n            </Alert>\n          </CardContent>\n        </Card>\n      </div>\n    </SubPage>\n  );\n}"
    },
    {
      "type": "create",
      "file": "src/pages/admin/ai-tools/quiz-wizard/QuizWizardStep1.tsx",
      "content": "import { useEffect, useMemo, useState } from \"react\";\nimport { useList } from \"@refinedev/core\";\nimport { useNavigate } from \"react-router-dom\";\nimport { SubPage } from \"@/components/layout\";\nimport { Lead } from \"@/components/reader\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport {\n  Button,\n  Input,\n  Select,\n  SelectTrigger,\n  SelectValue,\n  SelectContent,\n  SelectItem,\n  Checkbox,\n  Alert,\n  AlertDescription,\n  ScrollArea,\n  Badge,\n} from \"@/components/ui\";\nimport { useStepStore } from \"@/utility/formWizard\";\nimport { Info, ChevronRight, Search, EyeOff, FileText, SlidersHorizontal } from \"lucide-react\";\n\ntype StepData = {\n  courseId?: number;\n  topicId?: number;\n  materialId?: number;\n  count?: number;\n  difficulty?: \"easy\" | \"medium\" | \"hard\" | \"mixed\";\n  includeExplanations?: boolean;\n  randomized?: boolean;\n};\n\nconst SCHEMA = {\n  type: \"object\",\n  properties: {\n    courseId: { type: \"number\", required: true },\n    topicId: { type: \"number\", required: true },\n    materialId: { type: \"number\", required: true },\n    count: { type: \"number\" },\n    difficulty: { type: \"string\" },\n    includeExplanations: { type: \"boolean\" },\n    randomized: { type: \"boolean\" },\n  },\n};\n\nexport function QuizWizardStep1() {\n  const { registerStep, setStepData, getStepData } = useStepStore();\n  const navigate = useNavigate();\n  const data = (getStepData(\"qw_step1\") || {}) as StepData;\n\n  const [showOnlyPublished, setShowOnlyPublished] = useState(true);\n  const [query, setQuery] = useState(\"\");\n\n  useEffect(() => {\n    registerStep(\"qw_step1\", SCHEMA);\n    if (!data.count) {\n      setStepData(\"qw_step1\", {\n        count: 10,\n        difficulty: \"mixed\",\n        includeExplanations: true,\n        randomized: true,\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // Kursy\n  const { data: coursesData } = useList({\n    resource: \"courses\",\n    filters: showOnlyPublished ? [{ field: \"is_published\", operator: \"eq\", value: true }] : [],\n    sorters: [{ field: \"created_at\", order: \"desc\" }],\n    pagination: { pageSize: 100 },\n  });\n\n  // Tematy\n  const { data: topicsData } = useList({\n    resource: \"topics\",\n    filters: [{ field: \"course_id\", operator: \"eq\", value: data.courseId || -1 }],\n    sorters: [{ field: \"position\", order: \"asc\" }],\n    pagination: { pageSize: 500 },\n    queryOptions: { enabled: !!data.courseId },\n  });\n\n  // Materia≈Çy w temacie\n  const { data: materialsData, isLoading: materialsLoading } = useList({\n    resource: \"activities\",\n    filters:\n      data.topicId\n        ? [\n            { field: \"topic_id\", operator: \"eq\", value: data.topicId },\n            { field: \"type\", operator: \"eq\", value: \"material\" },\n          ]\n        : [],\n    sorters: [{ field: \"position\", order: \"asc\" }],\n    pagination: { pageSize: 1000 },\n    meta: { select: \"id,title,position,is_published\" },\n    queryOptions: { enabled: !!data.topicId },\n  });\n\n  // Filtrowanie materia≈Ç√≥w\n  const filteredMaterials = useMemo(() => {\n    const list = (materialsData?.data || []) as any[];\n    if (!query.trim()) return list;\n    const q = query.toLowerCase();\n    return list.filter((m) => String(m.title).toLowerCase().includes(q) || String(m.position).includes(q));\n  }, [materialsData?.data, query]);\n\n  const canContinue = !!data.courseId && !!data.topicId && !!data.materialId;\n\n  return (\n    <SubPage>\n      <Lead title=\"Krok 1\" description=\"Wyb√≥r materia≈Çu oraz parametr√≥w quizu\" />\n\n      <div className=\"grid gap-6 lg:grid-cols-[1.2fr,0.8fr] h-[calc(100vh-16rem)]\">\n        {/* Lewa kolumna */}\n        <Card className=\"flex flex-col h-full overflow-hidden\">\n          <CardHeader className=\"flex-shrink-0\">\n            <CardTitle>Kurs ‚Üí temat ‚Üí materia≈Ç</CardTitle>\n          </CardHeader>\n          <CardContent className=\"flex-1 flex flex-col gap-4 overflow-hidden\">\n            <div className=\"flex items-center gap-2 p-2 bg-muted rounded-lg flex-shrink-0\">\n              <Checkbox checked={showOnlyPublished} onCheckedChange={(checked) => setShowOnlyPublished(!!checked)} />\n              <label className=\"text-sm cursor-pointer\">Tylko opublikowane kursy</label>\n            </div>\n\n            <Select value={data.courseId ? String(data.courseId) : \"\"} onValueChange={(v) => setStepData(\"qw_step1\", { courseId: Number(v), topicId: undefined, materialId: undefined })}>\n              <SelectTrigger className=\"flex-shrink-0\">\n                <SelectValue placeholder=\"Wybierz kurs\" />\n              </SelectTrigger>\n              <SelectContent>\n                {(coursesData?.data || []).map((c: any) => (\n                  <SelectItem key={c.id} value={String(c.id)}>\n                    <div className=\"flex items-center gap-2\">\n                      {c.icon_emoji ? `${c.icon_emoji} ` : \"üìö \"}\n                      <span>{c.title}</span>\n                      {!c.is_published && (\n                        <Badge variant=\"outline\" className=\"ml-2 text-xs\">\n                          <EyeOff className=\"w-3 h-3\" />\n                          Szkic\n                        </Badge>\n                      )}\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Select value={data.topicId ? String(data.topicId) : \"\"} onValueChange={(v) => setStepData(\"qw_step1\", { topicId: Number(v), materialId: undefined })} disabled={!data.courseId}>\n              <SelectTrigger className=\"flex-shrink-0\">\n                <SelectValue placeholder=\"Wybierz temat\" />\n              </SelectTrigger>\n              <SelectContent>\n                {(topicsData?.data || []).map((t: any) => (\n                  <SelectItem key={t.id} value={String(t.id)}>\n                    {t.position}. {t.title}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            {data.topicId && (\n              <div className=\"rounded-lg border flex-1 overflow-hidden flex flex-col\">\n                <div className=\"flex items-center gap-2 p-2 border-b bg-muted/40 flex-shrink-0\">\n                  <Search className=\"w-4 h-4 text-muted-foreground\" />\n                  <Input value={query} onChange={(e) => setQuery(e.target.value)} placeholder=\"Filtruj materia≈Çy‚Ä¶\" className=\"h-8\" />\n                </div>\n\n                <ScrollArea className=\"flex-1 h-full\">\n                  <div className=\"divide-y\">\n                    {materialsLoading && <div className=\"p-3 text-xs text-muted-foreground\">≈Åadowanie materia≈Ç√≥w‚Ä¶</div>}\n                    {!materialsLoading && filteredMaterials.length === 0 && (\n                      <div className=\"p-3 text-xs text-muted-foreground\">{query ? \"Brak wynik√≥w dla filtru.\" : \"Brak materia≈Ç√≥w w tym temacie.\"}</div>\n                    )}\n                    {filteredMaterials.map((m: any) => {\n                      const selected = data.materialId === m.id;\n\n                      return (\n                        <button\n                          key={m.id}\n                          type=\"button\"\n                          onClick={() => setStepData(\"qw_step1\", { materialId: m.id })}\n                          className={[\"w-full text-left p-3 hover:bg-muted/50 transition\", selected ? \"bg-cyan-50/60 ring-1 ring-cyan-200\" : \"\"].join(\" \")}\n                        >\n                          <div className=\"flex items-start justify-between gap-3\">\n                            <div className=\"min-w-0 flex-1\">\n                              <div className=\"text-sm font-medium flex items-center gap-2\">\n                                <span className=\"shrink-0 inline-flex items-center justify-center w-5 h-5 rounded-full bg-primary/10 text-xs font-semibold\">\n                                  {m.position}\n                                </span>\n                                <span className=\"truncate\">{m.title}</span>\n                                {!m.is_published && (\n                                  <Badge variant=\"outline\" className=\"text-xs shrink-0\">\n                                    <EyeOff className=\"w-3 h-3\" />\n                                  </Badge>\n                                )}\n                              </div>\n                            </div>\n\n                            <div\n                              className={[\"shrink-0 w-3 h-3 rounded-full border mt-1\", selected ? \"bg-cyan-500 border-cyan-500\" : \"bg-white\"].join(\" \")}\n                              aria-hidden\n                            />\n                          </div>\n                        </button>\n                      );\n                    })}\n                  </div>\n                </ScrollArea>\n\n                <div className=\"p-2 border-t text-[11px] text-muted-foreground flex-shrink-0\">Kliknij materia≈Ç, aby go wybraƒá.</div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Prawa kolumna */}\n        <Card className=\"flex flex-col h-full overflow-hidden\">\n          <CardHeader className=\"flex-shrink-0\">\n            <CardTitle>Parametry generowania</CardTitle>\n          </CardHeader>\n          <CardContent className=\"flex-1 overflow-y-auto\">\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center gap-2\">\n                <SlidersHorizontal className=\"w-4 h-4 text-muted-foreground\" />\n                <span className=\"text-sm text-muted-foreground\">Steruj zakresem i poziomem pyta≈Ñ</span>\n              </div>\n\n              <div>\n                <div className=\"text-xs mb-1\">Liczba pyta≈Ñ</div>\n                <Input\n                  type=\"number\"\n                  min={3}\n                  max={30}\n                  value={data.count ?? 10}\n                  onChange={(e) => setStepData(\"qw_step1\", { count: Number(e.target.value) })}\n                />\n              </div>\n\n              <div>\n                <div className=\"text-xs mb-1\">Poziom trudno≈õci</div>\n                <Select value={data.difficulty || \"mixed\"} onValueChange={(v) => setStepData(\"qw_step1\", { difficulty: v as StepData[\"difficulty\"] })}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Wybierz poziom\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"mixed\">Mieszany</SelectItem>\n                    <SelectItem value=\"easy\">≈Åatwy</SelectItem>\n                    <SelectItem value=\"medium\">≈öredni</SelectItem>\n                    <SelectItem value=\"hard\">Trudny</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"flex items-center gap-2\">\n                <Checkbox checked={data.includeExplanations ?? true} onCheckedChange={(v) => setStepData(\"qw_step1\", { includeExplanations: Boolean(v) })} />\n                <span className=\"text-sm\">Dodaj wyja≈õnienia do poprawnych odpowiedzi</span>\n              </div>\n\n              <div className=\"flex items-center gap-2\">\n                <Checkbox checked={data.randomized ?? true} onCheckedChange={(v) => setStepData(\"qw_step1\", { randomized: Boolean(v) })} />\n                <span className=\"text-sm\">Losuj kolejno≈õƒá odpowiedzi</span>\n              </div>\n\n              <Alert>\n                <Info className=\"h-4 w-4\" />\n                <AlertDescription className=\"text-xs\">\n                  Pytania bƒôdƒÖ tworzone na podstawie tre≈õci wybranego materia≈Çu. Upewnij siƒô, ≈ºe materia≈Ç jest kompletny.\n                </AlertDescription>\n              </Alert>\n\n              <Button disabled={!canContinue} className=\"w-full\" onClick={() => navigate(\"/admin/quiz-wizard/step2\")}>\n                Kontynuuj\n                <ChevronRight className=\"w-4 h-4 ml-1\" />\n              </Button>\n\n              {!canContinue && <p className=\"text-xs text-muted-foreground text-center\">Wybierz kurs, temat i materia≈Ç aby kontynuowaƒá</p>}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </SubPage>\n  );\n}"
    },
    {
      "type": "create",
      "file": "src/pages/admin/ai-tools/quiz-wizard/QuizWizardStep2.tsx",
      "content": "import { useEffect, useMemo, useState } from \"react\";\nimport { useOne } from \"@refinedev/core\";\nimport { useNavigate } from \"react-router-dom\";\nimport { callLLM } from \"@/utility/llmService\";\nimport { useStepStore } from \"@/utility/formWizard\";\nimport { SubPage } from \"@/components/layout\";\nimport { Lead } from \"@/components/reader\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Button, Alert, AlertDescription, ScrollArea, Badge, Textarea } from \"@/components/ui\";\nimport {\n  Loader2,\n  Sparkles,\n  AlertCircle,\n  ChevronRight,\n  BookOpen,\n  Target,\n  ChevronDown,\n  ChevronUp,\n} from \"lucide-react\";\n\ntype Activity = {\n  id: number;\n  title: string;\n  content: string; // markdown source\n  topic_id: number;\n  position: number;\n};\n\ntype QuizItem = {\n  question: string;\n  options: string[];\n  answerIndex: number;\n  explanation?: string;\n};\n\ntype GeneratedQuiz = {\n  material_id: number;\n  topic_id: number;\n  title: string;\n  items: QuizItem[];\n};\n\nconst QUIZ_LIST_SCHEMA = {\n  type: \"object\",\n  properties: {\n    items: {\n      type: \"array\",\n      minItems: 3,\n      items: {\n        type: \"object\",\n        properties: {\n          question: { type: \"string\", required: true },\n          options: {\n            type: \"array\",\n            items: { type: \"string\" },\n            minItems: 4,\n            maxItems: 4,\n            required: true,\n          },\n          answerIndex: { type: \"number\", minimum: 0, maximum: 3, required: true },\n          explanation: { type: \"string\" },\n        },\n      },\n      required: true,\n    },\n  },\n};\n\nexport function QuizWizardStep2() {\n  const { getStepData, setStepData } = useStepStore();\n  const navigate = useNavigate();\n\n  const step1 = getStepData(\"qw_step1\") as {\n    materialId?: number;\n    topicId?: number;\n    count?: number;\n    difficulty?: \"easy\" | \"medium\" | \"hard\" | \"mixed\";\n    includeExplanations?: boolean;\n    randomized?: boolean;\n  };\n\n  const materialId = step1?.materialId;\n  const topicId = step1?.topicId;\n\n  const [item, setItem] = useState<GeneratedQuiz | null>(null);\n  const [generating, setGenerating] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [errorDetails, setErrorDetails] = useState<any | null>(null);\n  const [showErrorDetails, setShowErrorDetails] = useState(false);\n\n  useEffect(() => {\n    if (!materialId || !topicId) {\n      navigate(\"/admin/quiz-wizard/step1\");\n    }\n  }, [materialId, topicId, navigate]);\n\n  // Pobierz materia≈Ç\n  const { data: material } = useOne<Activity>({\n    resource: \"activities\",\n    id: String(materialId || \"\"),\n    meta: { select: \"*\" },\n    queryOptions: { enabled: !!materialId },\n  });\n\n  const handleGenerate = async () => {\n    if (!material?.data) return;\n    setError(null);\n    setErrorDetails(null);\n    setShowErrorDetails(false);\n    setGenerating(true);\n    setStepData(\"qw_step2\", { isGenerating: true });\n\n    const prompt = `\nJeste≈õ nauczycielem tworzƒÖcym pytania testowe na podstawie materia≈Çu edukacyjnego (Markdown).\n\nPARAMETRY QUIZU:\n- liczba pyta≈Ñ: ${step1.count ?? 10}\n- poziom trudno≈õci: ${step1.difficulty ?? \"mixed\"}\n- losuj kolejno≈õƒá odpowiedzi: ${step1.randomized ? \"tak\" : \"nie\"}\n- dodawaj wyja≈õnienia: ${step1.includeExplanations ? \"tak\" : \"nie\"}\n\nMATERIA≈Å (≈∫r√≥d≈Ço, Markdown):\n\"\"\"\n${material.data.content}\n\"\"\"\n\nWYTYCZNE:\n1) Pytania muszƒÖ testowaƒá zrozumienie kluczowych idei z materia≈Çu (nie pamiƒôci√≥wka).\n2) Ka≈ºde pytanie ma DOK≈ÅADNIE 4 opcje odpowiedzi.\n3) answerIndex wskazuje poprawnƒÖ odpowied≈∫ (0-3).\n4) Unikaj opcji \"wszystkie/≈ºadne z powy≈ºszych\".\n5) Je≈õli \"dodawaj wyja≈õnienia\" = tak ‚Üí pole explanation ma kr√≥tkie uzasadnienie odpowiedzi.\n6) Zweryfikuj sp√≥jno≈õƒá logicznƒÖ i brak wieloznaczno≈õci.\n\nZWR√ìƒÜ WY≈ÅƒÑCZNIE JSON ze strukturƒÖ:\n{\n  \"items\": [\n    { \"question\": \"...\", \"options\": [\"A\",\"B\",\"C\",\"D\"], \"answerIndex\": 0, \"explanation\": \"...\" }\n  ]\n}\n    `.trim();\n\n    try {\n      const out = await callLLM(prompt, QUIZ_LIST_SCHEMA);\n      const items = Array.isArray(out.items) ? out.items : [];\n      if (items.length < 3) throw new Error(\"Za ma≈Ço poprawnych pyta≈Ñ w odpowiedzi modelu.\");\n\n      const generated: GeneratedQuiz = {\n        material_id: material.data.id,\n        topic_id: material.data.topic_id,\n        title: `${material.data.title} ‚Äî Quiz`,\n        items,\n      };\n      setItem(generated);\n    } catch (e: any) {\n      const msg =\n        e?.message?.toString()?.includes(\"503\") || e?.details?.toString()?.includes?.(\"503\")\n          ? \"B≈ÇƒÖd komunikacji z modelem (503)\"\n          : e?.message || \"Nie uda≈Ço siƒô wygenerowaƒá quizu.\";\n      setError(msg);\n\n      const details =\n        e?.info ??\n        e?.response ??\n        {\n          message: e?.message,\n          status: e?.status || e?.statusCode,\n          details: e?.details,\n          raw: e,\n        };\n      setErrorDetails(details);\n    } finally {\n      setGenerating(false);\n      setStepData(\"qw_step2\", { isGenerating: false });\n    }\n  };\n\n  const goToSave = () => {\n    if (!item) return;\n    navigate(\"/admin/quiz-wizard/step3\", { state: { item } });\n  };\n\n  return (\n    <SubPage>\n      <Lead title=\"Krok 2\" description=\"Generowanie pyta≈Ñ na podstawie materia≈Çu\" />\n\n      <div className=\"grid gap-6 lg:grid-cols-[0.9fr,1.1fr]\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Target className=\"w-5 h-5\" />\n              Panel generowania\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"rounded-lg bg-muted p-4 space-y-2\">\n              <div className=\"text-sm\">\n                <span className=\"text-muted-foreground\">Materia≈Ç:</span>{\" \"}\n                <span className=\"font-medium\">{material?.data?.title || \"-\"}</span>\n              </div>\n              <div className=\"flex gap-2 mt-3\">\n                <Badge variant=\"outline\">{step1.difficulty ?? \"mixed\"}</Badge>\n                <Badge variant=\"outline\">{(step1.count ?? 10) + \" pyta≈Ñ\"}</Badge>\n                {step1.includeExplanations && <Badge variant=\"default\">Wyja≈õnienia</Badge>}\n              </div>\n            </div>\n\n            <Alert>\n              <BookOpen className=\"h-4 w-4\" />\n              <AlertDescription className=\"text-xs\">\n                Pytania bƒôdƒÖ dotyczy≈Çy tre≈õci wybranego materia≈Çu. Mo≈ºesz je p√≥≈∫niej edytowaƒá przed zapisem.\n              </AlertDescription>\n            </Alert>\n\n            <div className=\"flex flex-col gap-2\">\n              <Button onClick={handleGenerate} disabled={generating} className=\"w-full\" size=\"lg\">\n                {generating ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Generowanie pyta≈Ñ...\n                  </>\n                ) : (\n                  <>\n                    <Sparkles className=\"w-4 h-4 mr-2\" />\n                    Wygeneruj pytania\n                  </>\n                )}\n              </Button>\n\n              <Button variant=\"default\" onClick={goToSave} disabled={!item || generating} className=\"w-full\">\n                Przejd≈∫ do zapisu\n                <ChevronRight className=\"w-4 h-4 ml-1\" />\n              </Button>\n            </div>\n\n            {error && (\n              <div className=\"space-y-2\">\n                <Alert variant=\"destructive\">\n                  <AlertCircle className=\"h-4 w-4\" />\n                  <AlertDescription>{error}</AlertDescription>\n                </Alert>\n\n                {errorDetails && (\n                  <Card>\n                    <CardHeader className=\"py-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <CardTitle className=\"text-sm\">Szczeg√≥≈Çy b≈Çƒôdu</CardTitle>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => setShowErrorDetails((v) => !v)}\n                          className=\"h-7\"\n                        >\n                          {showErrorDetails ? <ChevronUp className=\"w-4 h-4\" /> : <ChevronDown className=\"w-4 h-4\" />}\n                        </Button>\n                      </div>\n                    </CardHeader>\n                    {showErrorDetails && (\n                      <CardContent className=\"pt-0\">\n                        <Textarea\n                          className=\"font-mono text-xs h-40\"\n                          readOnly\n                          value={(() => {\n                            try {\n                              return JSON.stringify(errorDetails, null, 2);\n                            } catch {\n                              return String(errorDetails);\n                            }\n                          })()}\n                        />\n                      </CardContent>\n                    )}\n                  </Card>\n                )}\n              </div>\n            )}\n\n            {generating && (\n              <div className=\"text-center text-sm text-muted-foreground space-y-1\">\n                <p>Analizujƒô materia≈Ç i tworzƒô pytania...</p>\n                <p className=\"text-xs\">To mo≈ºe potrwaƒá kilkana≈õcie sekund</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* PodglƒÖd */}\n        <Card>\n          <CardHeader>\n            <CardTitle>PodglƒÖd pyta≈Ñ</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {!item ? (\n              <div className=\"flex flex-col items-center justify-center py-16 text-muted-foreground\">\n                {generating ? (\n                  <>\n                    <Loader2 className=\"w-8 h-8 mb-3 animate-spin\" />\n                    <div className=\"text-sm\">Generowanie pyta≈Ñ...</div>\n                  </>\n                ) : (\n                  <>\n                    <BookOpen className=\"w-8 h-8 mb-3 opacity-50\" />\n                    <div className=\"text-sm\">Brak wygenerowanych pyta≈Ñ</div>\n                    <div className=\"text-xs mt-1\">Kliknij \"Wygeneruj pytania\"</div>\n                  </>\n                )}\n              </div>\n            ) : (\n              <ScrollArea className=\"h-[500px] rounded-lg border p-4\">\n                <div className=\"space-y-4\">\n                  {item.items.map((q, idx) => (\n                    <div key={idx} className=\"rounded-lg border p-3\">\n                      <div className=\"text-sm font-medium mb-2\">\n                        {idx + 1}. {q.question}\n                      </div>\n                      <ul className=\"text-sm space-y-1\">\n                        {q.options.map((opt, i) => (\n                          <li key={i} className={i === q.answerIndex ? \"font-medium\" : \"\"}>\n                            {String.fromCharCode(65 + i)}. {opt} {i === q.answerIndex ? \"‚úì\" : \"\"}\n                          </li>\n                        ))}\n                      </ul>\n                      {q.explanation && (\n                        <div className=\"mt-2 text-xs text-muted-foreground\">\n                          <span className=\"font-medium\">Wyja≈õnienie: </span>\n                          {q.explanation}\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </ScrollArea>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </SubPage>\n  );\n}"
    },
    {
      "type": "create",
      "file": "src/pages/admin/ai-tools/quiz-wizard/QuizWizardStep3.tsx",
      "content": "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { useLocation, useNavigate, Link } from \"react-router-dom\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useCreate, useList } from \"@refinedev/core\";\nimport { SubPage } from \"@/components/layout\";\nimport { Lead } from \"@/components/reader\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Button, Input, Switch, Alert, AlertDescription, Textarea } from \"@/components/ui\";\nimport { Save, AlertCircle, CheckCircle, ArrowLeft } from \"lucide-react\";\nimport YAML from \"yaml\";\n\ntype QuizItem = {\n  question: string;\n  options: string[];\n  answerIndex: number;\n  explanation?: string;\n};\n\ntype GeneratedQuiz = {\n  material_id: number;\n  topic_id: number;\n  title: string;\n  items: QuizItem[];\n};\n\nexport function QuizWizardStep3() {\n  const navigate = useNavigate();\n  const location = useLocation() as any;\n  const { mutate: createActivity } = useCreate();\n\n  const initialItem = useMemo<GeneratedQuiz | null>(\n    () => location?.state?.item ?? null,\n    [location?.state?.item]\n  );\n\n  const [title, setTitle] = useState<string>(initialItem?.title ?? \"\");\n  const [isPublished, setIsPublished] = useState<boolean>(false);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [savedActivityId, setSavedActivityId] = useState<number | null>(null);\n  const [yamlPreview, setYamlPreview] = useState<string>(\"\");\n\n  // Ostatnia pozycja w temacie\n  const { data: activitiesData } = useList({\n    resource: \"activities\",\n    filters: initialItem ? [\n      { field: \"topic_id\", operator: \"eq\", value: initialItem.topic_id }\n    ] : [],\n    sorters: [{ field: \"position\", order: \"desc\" }],\n    pagination: { pageSize: 1 },\n    queryOptions: { enabled: !!initialItem?.topic_id }\n  });\n\n  useEffect(() => {\n    if (!initialItem) {\n      navigate(\"/admin/quiz-wizard/step2\");\n      return;\n    }\n    // YAML preview budowany z listy pyta≈Ñ\n    const yaml = YAML.stringify({ questions: initialItem.items });\n    setYamlPreview(yaml);\n  }, [initialItem, navigate]);\n\n  const handleSave = async () => {\n    if (!initialItem) return;\n    if (!title || title.trim().length < 3) {\n      setError(\"Tytu≈Ç musi mieƒá minimum 3 znaki.\");\n      return;\n    }\n\n    if (!yamlPreview || yamlPreview.trim().length < 10) {\n      setError(\"Zawarto≈õƒá quizu jest pusta lub zbyt kr√≥tka.\");\n      return;\n    }\n\n    setSaving(true);\n    setError(null);\n\n    try {\n      const topicId = Number(initialItem.topic_id);\n      const lastActivity = activitiesData?.data?.[0];\n      const nextPosition = lastActivity?.position ? Number(lastActivity.position) + 1 : 1;\n\n      // Zapisz jako aktywno≈õƒá typu \"quiz\" (tre≈õƒá: YAML z pytaniami)\n      await new Promise<number>((resolve, reject) => {\n        createActivity(\n          {\n            resource: \"activities\",\n            values: {\n              topic_id: topicId,\n              type: \"quiz\",\n              title: title.trim(),\n              content: `\\`\\`\\`quiz\\n${yamlPreview}\\`\\`\\``,\n              duration_min: 10,\n              position: nextPosition,\n              is_published: isPublished,\n              // opcjonalnie mo≈ºna dodaƒá odwo≈Çanie do materia≈Çu w tytule lub meta je≈õli backend to obs≈Çuguje\n            },\n          },\n          {\n            onSuccess: (res: any) => {\n              const newId = res?.data?.id;\n              if (newId) {\n                const numId = typeof newId === 'string' ? parseInt(newId, 10) : newId;\n                setSavedActivityId(numId);\n                resolve(numId);\n              } else {\n                reject(new Error(\"Nie otrzymano ID aktywno≈õci\"));\n              }\n            },\n            onError: (e: any) => reject(e),\n          }\n        );\n      });\n    } catch (e: any) {\n      if (e?.code === '23505') {\n        setError(\"Quiz o tym tytule ju≈º istnieje w tym temacie. Zmie≈Ñ tytu≈Ç.\");\n      } else if (e?.code === '23503') {\n        setError(\"Nieprawid≈Çowy temat. Od≈õwie≈º stronƒô i spr√≥buj ponownie.\");\n      } else if (e?.message) {\n        setError(e.message);\n      } else {\n        setError(\"Nie uda≈Ço siƒô zapisaƒá quizu. Spr√≥buj ponownie.\");\n      }\n      setSaving(false);\n    }\n  };\n\n  if (!initialItem) {\n    return (\n      <SubPage>\n        <Lead title=\"Krok 3\" description=\"Zapis quizu\" />\n        <Card>\n          <CardContent className=\"pt-6\">\n            <Alert variant=\"destructive\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>\n                Brak danych z poprzedniego kroku. \n                <Link to=\"/admin/quiz-wizard/step2\" className=\"underline ml-1\">\n                  Wr√≥ƒá do kroku 2\n                </Link>\n              </AlertDescription>\n            </Alert>\n          </CardContent>\n        </Card>\n      </SubPage>\n    );\n  }\n\n  return (\n    <SubPage>\n      <Lead title=\"Krok 3\" description=\"Zapis quizu do bazy\" />\n\n      <div className=\"grid gap-6 lg:grid-cols-2\">\n        {/* Formularz */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Ustawienia zapisu</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium mb-2\">\n                Tytu≈Ç quizu <span className=\"text-red-500\">*</span>\n              </label>\n              <Input\n                value={title}\n                onChange={(e) => setTitle(e.target.value)}\n                placeholder=\"np. Quiz do materia≈Çu: Wprowadzenie do ...\"\n                disabled={saving || savedActivityId !== null}\n              />\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Tytu≈Ç bƒôdzie widoczny dla uczni√≥w\n              </p>\n            </div>\n\n            <div className=\"flex items-center justify-between rounded-lg border p-3\">\n              <div className=\"text-sm\">\n                <div className=\"font-medium\">Opublikuj od razu</div>\n                <div className=\"text-xs text-muted-foreground\">\n                  Quiz bƒôdzie widoczny dla uczni√≥w\n                </div>\n              </div>\n              <Switch \n                checked={isPublished} \n                onCheckedChange={setIsPublished}\n                disabled={saving || savedActivityId !== null}\n              />\n            </div>\n\n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertCircle className=\"h-4 w-4\" />\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n\n            {savedActivityId && (\n              <Alert className=\"border-green-200 bg-green-50\">\n                <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                <AlertDescription className=\"text-green-900\">\n                  <span className=\"font-medium\">Quiz zapisany!</span><br />\n                  ID: {savedActivityId}<br />\n                  <span className=\"text-xs\">Mo≈ºesz wr√≥ciƒá do panelu lub dodaƒá kolejny quiz.</span>\n                </AlertDescription>\n              </Alert>\n            )}\n\n            <div className=\"flex gap-2\">\n              <Button\n                onClick={handleSave}\n                disabled={saving || savedActivityId !== null || !title.trim()}\n                className=\"flex-1\"\n              >\n                {saving ? (\n                  <>\n                    <Save className=\"w-4 h-4 mr-2 animate-pulse\" />\n                    Zapisywanie...\n                  </>\n                ) : savedActivityId ? (\n                  <>\n                    <CheckCircle className=\"w-4 h-4 mr-2\" />\n                    Zapisano!\n                  </>\n                ) : (\n                  <>\n                    <Save className=\"w-4 h-4 mr-2\" />\n                    Zapisz quiz\n                  </>\n                )}\n              </Button>\n              \n              <Button \n                asChild \n                variant=\"outline\"\n                disabled={saving}\n              >\n                <Link to=\"/admin/quiz-wizard/step2\">\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Wr√≥ƒá\n                </Link>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* PodglƒÖd (YAML) */}\n        <Card>\n          <CardHeader>\n            <CardTitle>PodglƒÖd tre≈õci (YAML)</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <Textarea\n              className=\"font-mono text-xs h-[420px]\"\n              value={yamlPreview}\n              onChange={(e) => setYamlPreview(e.target.value)}\n              disabled={saving || savedActivityId !== null}\n            />\n            <p className=\"text-xs text-muted-foreground\">\n              Quiz zostanie zapisany jako aktywno≈õƒá typu <code>quiz</code> z tre≈õciƒÖ w formacie YAML w bloku <code>```quiz</code>.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    </SubPage>\n  );\n}"
    },
    {
      "type": "create",
      "file": "src/pages/admin/ai-tools/quiz-wizard/index.tsx",
      "content": "import { Route } from \"react-router\";\nimport { QuizWizardDashboard } from \"./QuizWizardDashboard\";\nimport { QuizWizardStep1 } from \"./QuizWizardStep1\";\nimport { QuizWizardStep2 } from \"./QuizWizardStep2\";\nimport { QuizWizardStep3 } from \"./QuizWizardStep3\";\nimport { Brain } from \"lucide-react\";\n\nexport { QuizWizardDashboard } from \"./QuizWizardDashboard\";\nexport { QuizWizardStep1 } from \"./QuizWizardStep1\";\nexport { QuizWizardStep2 } from \"./QuizWizardStep2\";\nexport { QuizWizardStep3 } from \"./QuizWizardStep3\";\n\nexport const quizWizardRoutes = [\n  <Route key=\"quiz-dashboard\" path=\"/quiz-wizard\" element={<QuizWizardDashboard />} />,\n  <Route key=\"quiz-step1\" path=\"/quiz-wizard/step1\" element={<QuizWizardStep1 />} />,\n  <Route key=\"quiz-step2\" path=\"/quiz-wizard/step2\" element={<QuizWizardStep2 />} />,\n  <Route key=\"quiz-step3\" path=\"/quiz-wizard/step3\" element={<QuizWizardStep3 />} />,\n];\n\nexport const quizWizardResource = {\n  name: \"quiz-wizard\",\n  list: \"/quiz-wizard\",\n  create: \"/quiz-wizard/step1\",\n  meta: {\n    canDelete: false,\n    label: \"Kreator quiz√≥w\",\n    icon: <Brain className=\"h-4 w-4\" />,\n  },\n};"
    },
    {
      "type": "search-replace",
      "file": "src/pages/admin/index.tsx",
      "search": "import { courseStructureRoutes } from \"./ai-tools/course-structure-wizard\";\nimport { aiToolsRoutes } from \"./ai-tools\";\nimport { educationalMaterialRoutes } from \"./ai-tools/educational-material-wizard\";",
      "replace": "import { courseStructureRoutes } from \"./ai-tools/course-structure-wizard\";\nimport { aiToolsRoutes } from \"./ai-tools\";\nimport { educationalMaterialRoutes } from \"./ai-tools/educational-material-wizard\";\nimport { quizWizardRoutes } from \"./ai-tools/quiz-wizard\";"
    },
    {
      "type": "search-replace",
      "file": "src/pages/admin/index.tsx",
      "search": "...educationalMaterialRoutes,\n  // ...quizWizardRoutes,\n\n];",
      "replace": "...educationalMaterialRoutes,\n  ...quizWizardRoutes,\n\n];"
    },
    {
      "type": "search-replace",
      "file": "src/pages/admin/resources.tsx",
      "search": "import { courseStructureResource } from \"./ai-tools/course-structure-wizard\";\nimport { educationalMaterialResource } from \"./ai-tools/educational-material-wizard\"; // ‚¨ÖÔ∏è DODANE\n// import { quizWizardResource } from \"./ai-tools/quiz-wizard\";",
      "replace": "import { courseStructureResource } from \"./ai-tools/course-structure-wizard\";\nimport { educationalMaterialResource } from \"./ai-tools/educational-material-wizard\"; // ‚¨ÖÔ∏è DODANE\nimport { quizWizardResource } from \"./ai-tools/quiz-wizard\";"
    },
    {
      "type": "search-replace",
      "file": "src/pages/admin/resources.tsx",
      "search": "// (opcjonalnie w przysz≈Ço≈õci)\n      // {\n      //   ...quizWizardResource,\n      //   list: \"/admin/quiz-wizard\",\n      //   meta: {\n      //     ...quizWizardResource.meta,\n      //     parent: \"ai-tools\",\n      //   },\n      // },",
      "replace": "{\n        ...quizWizardResource,\n        list: \"/admin/quiz-wizard\",\n        meta: {\n          ...quizWizardResource.meta,\n          parent: \"ai-tools\",\n        },\n      },"
    },
    {
      "type": "search-replace",
      "file": "src/pages/admin/index.tsx",
      "search": "// src/pages/admin/index.tsx\nimport { lazy, Suspense } from \"react\";",
      "replace": "// src/pages/admin/index.tsx\nimport { lazy, Suspense } from \"react\";\nimport type { ReactElement } from \"react\";"
    },
    {
      "type": "search-replace",
      "file": "src/pages/admin/index.tsx",
      "search": "export const AdminModule = (\n  <Route\n    path=\"/admin/*\"\n    element={\n      <Authenticated key=\"admin-auth\" fallback={<CatchAllNavigate to=\"/login\" />}>\n        <AdminAccessGuard>\n          <Suspense\n            fallback={<LoadingFallback text=\"≈Åadowanie panelu administratora...\" colorClass=\"border-red-600\" />}\n          >\n            <AdminPanel />\n          </Suspense>\n        </AdminAccessGuard>\n      </Authenticated>\n    }\n  />\n);",
      "replace": "export const AdminModule: ReactElement = (\n  <Route\n    path=\"/admin/*\"\n    element={\n      <Authenticated key=\"admin-auth\" fallback={<CatchAllNavigate to=\"/login\" />}>\n        <AdminAccessGuard>\n          <Suspense\n            fallback={<LoadingFallback text=\"≈Åadowanie panelu administratora...\" colorClass=\"border-red-600\" />}\n          >\n            <AdminPanel />\n          </Suspense>\n        </AdminAccessGuard>\n      </Authenticated>\n    }\n  />\n);"
    }
  ],
  "status": "applied",
  "affectedFiles": [
    "src/pages/admin/ai-tools/quiz-wizard/QuizWizardDashboard.tsx",
    "src/pages/admin/ai-tools/quiz-wizard/QuizWizardStep1.tsx",
    "src/pages/admin/ai-tools/quiz-wizard/QuizWizardStep2.tsx",
    "src/pages/admin/ai-tools/quiz-wizard/QuizWizardStep3.tsx",
    "src/pages/admin/ai-tools/quiz-wizard/index.tsx",
    "src/pages/admin/index.tsx",
    "src/pages/admin/resources.tsx"
  ],
  "includedFiles": [
    "src/pages/admin/ai-tools/AiToolsDashboard.tsx",
    "src/pages/admin/ai-tools/course-structure-wizard/index.tsx",
    "src/pages/admin/ai-tools/educational-material-wizard/index.tsx",
    "src/pages/admin/ai-tools/index.tsx",
    "src/pages/admin/index.tsx",
    "src/pages/admin/resources.tsx",
    "src/pages/admin/ai-tools/educational-material-wizard/EduMaterialsDashboard.tsx",
    "src/pages/admin/ai-tools/educational-material-wizard/EduMaterialsStep1.tsx",
    "src/pages/admin/ai-tools/educational-material-wizard/EduMaterialsStep2.tsx",
    "src/pages/admin/ai-tools/educational-material-wizard/EduMaterialsStep3.tsx",
    "src/pages/admin/ai-tools/educational-material-wizard/EduMaterialsStep4.tsx"
  ]
}